/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'jacoco'
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'signing'

  group = 'com.google.endpoints'
  version = "1.0.0-beta.8"

  jacocoTestReport {
    reports {
      xml.enabled true
    }
  }

  // force checkstyle tasks to fail on warnings, but don't run checkstyle on
  // code generated projects
  if (name != 'endpoints-management-protos') {
    apply plugin: 'checkstyle'

    checkstyle {
      configFile = rootProject.file("config/checkstyle/checkstyle.xml")
      toolVersion = "6.19"
    }

    tasks.withType(Checkstyle).each { checkstyleTask ->
      checkstyleTask.doLast {
        reports.all { report ->
          def outputFile = report.destination
          if (outputFile.exists() && outputFile.text.contains("<error ")) {
            outputs.upToDateWhen { false }
            throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
          }
        }
      }
    }
  }
}

subprojects {
  repositories {
    mavenLocal()
    mavenCentral()
  }

  compileJava {
    // Workaround to actually apply project compatibility
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
  }

  compileTestJava {
    // Workaround to actually apply project compatibility
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
  }
}

def configureMaven(project, projectName, projectDescription) {
  configure(project) {
    task javadocJar(type: Jar) {
      classifier = 'javadoc'
      from javadoc
    }

    task sourcesJar(type: Jar) {
      classifier = 'sources'
      from sourceSets.main.allSource
    }

    artifacts {
      archives javadocJar, sourcesJar
    }

    signing {
      required false
      sign configurations.archives
    }

    uploadArchives {
      repositories {
        mavenDeployer {
          def tmpSnapshotRepo = "http://104.197.230.53:8081/nexus/content/repositories/snapshots/"
          beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

          String stagingUrl
            if (rootProject.hasProperty('repositoryId')) {
              stagingUrl = 'https://oss.sonatype.org/service/local/staging/deployByRepositoryId/' +
                  rootProject.repositoryId
            } else {
              stagingUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            }
          def configureAuth = {
            if (rootProject.hasProperty('ossrhUsername') && rootProject.hasProperty('ossrhPassword')) {
              authentication(userName: rootProject.ossrhUsername, password: rootProject.ossrhPassword)
            }
          }
          repository(url: stagingUrl, configureAuth)
          snapshotRepository(url: tmpSnapshotRepo) {
            authentication(userName: privateOssrhUsername, password: privateOssrhPassword)
          }

          pom.project {
            name projectName
            description projectDescription
            packaging 'jar'
            url 'https://cloud.google.com/endpoints/docs/frameworks/java'

            scm {
              connection 'scm:git:https://github.com/cloudendpoints/endpoints-management-java'
              developerConnection 'scm:git:https://github.com/cloudendpoints/endpoints-management-java'
              url 'scm:git:https://github.com/cloudendpoints/endpoints-management-java'
            }

            licenses {
              license {
                name 'The Apache License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              }
            }

            developers {
              developer {
                id 'temiola@google.com'
                name 'Tim Emiola'
                email 'temiola@google.com'
                organization = "Google, Inc."
                organizationUrl "https://www.google.com"
              }
              developer {
                id 'yangguan@google.com'
                name 'Yang Guan'
                email 'yangguan@google.com'
                organization = "Google, Inc."
                organizationUrl "https://www.google.com"
              }
            }
          }
        }
      }
    }
  }
}
